name: Deploy to VPS - Simple & Working

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Only one deployment at a time
concurrency:
  group: vps-deployment
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=20 \
              -p ${VPS_PORT} ${VPS_USER}@${VPS_HOST} << 'ENDSSH'
            
            set -e
            cd /var/www/zyphextech
            
            echo "� Current user: $(whoami)"
            echo "📁 Directory ownership: $(ls -ld /var/www/zyphextech)"
            
            echo "�🔄 Stashing local changes..."
            git stash || true
            
            echo "🔄 Pulling latest code..."
            git pull origin main
            
            echo "🔧 Fix permissions if needed..."
            # Ensure deploy user owns all files
            if [ "$(stat -c '%U' .)" != "deploy" ]; then
              echo "⚠️  Directory not owned by deploy user, fixing..."
              sudo chown -R deploy:deploy /var/www/zyphextech
            fi
            
            echo "💾 Ensuring swap space is available..."
            # Check if swap exists, create if needed (for low memory VPS)
            if [ $(swapon --show | wc -l) -eq 0 ]; then
              echo "Creating 2GB swap file..."
              sudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo "Swap enabled"
            else
              echo "Swap already enabled"
            fi
            
            echo "🧹 Cleaning build artifacts..."
            # Complete clean - remove ALL build artifacts and dependencies
            echo "Removing .next, node_modules, and lock files..."
            sudo rm -rf .next || rm -rf .next
            sudo rm -rf node_modules/.cache || rm -rf node_modules/.cache
            rm -f package-lock.json
            
            # Fix permissions again after cleanup
            sudo chown -R deploy:deploy /var/www/zyphextech 2>/dev/null || true
            
            echo "📦 Installing dependencies (fresh install)..."
            npm install --prefer-offline --no-audit --legacy-peer-deps
            
            echo "🔧 Generating Prisma Client..."
            npx prisma generate
            
            echo "🗄️  Running migrations..."
            npx prisma migrate deploy || true
            
            echo "🏗️  Building application..."
            # Stop PM2 first to free up memory
            pm2 stop zyphextech || true
            pm2 delete zyphextech || true
            
            # Clear memory cache
            sync
            echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null || true
            
            # Build with maximum memory optimization
            # - 3GB heap (leave 1GB for system)
            # - Disable type checking (already in config)
            # - Disable Sentry instrumentation
            # - Single CPU core
            NODE_OPTIONS='--max-old-space-size=3072' \
            NEXT_TELEMETRY_DISABLED=1 \
            SKIP_TYPE_CHECK=true \
            NEXT_RUNTIME='' \
            npm run build
            
            echo "✅ Build completed!"
            
            echo "🔄 Restarting application..."
            pm2 restart zyphextech || pm2 start ecosystem.config.js
            pm2 save
            
            echo "⏳ Waiting for startup..."
            sleep 15
            
            echo "🏥 Health check..."
            for i in {1..5}; do
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "✅ Application is healthy!"
                exit 0
              fi
              echo "Attempt $i/5 failed, retrying..."
              sleep 5
            done
            
            echo "⚠️  Health check timeout, but application may still be starting"
            echo "Check: pm2 logs zyphextech"
            
          ENDSSH

      - name: ✅ Success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 https://www.zyphextech.com"

      - name: ❌ Failure
        if: failure()
        run: |
          echo "❌ Deployment failed - check logs"
          echo "🔗 https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
