// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your models here
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String?
  password     String?
  role         Role      @default(USER)
  skills       Json? // Array of user skills
  hourlyRate   Float? // Default hourly rate
  availability Json? // Availability schedule
  timezone     String? // User timezone
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? // Soft delete capability

  // Existing relations
  projects        Project[]
  managedProjects Project[] @relation("ProjectManager")
  teams           Team[]
  accounts        Account[]
  sessions        Session[]
  emailVerified   DateTime?
  image           String?

  // New relations for IT Services Platform
  timeEntries      TimeEntry[]
  assignedTasks    Task[]           @relation("TaskAssignee")
  createdTasks     Task[]           @relation("TaskCreator")
  activityLogs     ActivityLog[]
  sentMessages     Message[]        @relation("MessageSender")
  receivedMessages Message[]        @relation("MessageReceiver")
  documents        Document[]
  teamMemberships  TeamMember[]
  contactLogs      ContactLog[]
  resourceProfile  ResourceProfile?
  userPermissions  UserPermission[]
  auditLogs        AuditLog[]
  refreshTokens    RefreshToken[]

  // New messaging relations
  createdChannels  Channel[]         @relation("ChannelCreator")
  channels         Channel[]         @relation("ChannelMembers")
  messageReads     MessageRead[]     @relation("UserMessageReads")
  messageReactions MessageReaction[] @relation("UserMessageReactions")
  notifications    Notification[]    @relation("UserNotifications")

  // Advanced Project Management Relations
  ownedRisks          ProjectRisk[]          @relation("RiskOwner")
  identifiedRisks     ProjectRisk[]          @relation("RiskIdentifier")
  changeRequests      ChangeRequest[]        @relation("ChangeRequester")
  approvedChanges     ChangeRequest[]        @relation("ChangeApprover")
  resourceAllocations ResourceAllocation[]   @relation("ResourceAllocations")
  sentCommunications  ProjectCommunication[] @relation("CommunicationSender")
  uploadedDocuments   ProjectDocument[]      @relation("DocumentUploader")
  expenses            Expense[]
  LeadActivity        LeadActivity[]

  // Meeting relations
  organizedMeetings  Meeting[]           @relation("MeetingOrganizer")
  meetingAttendances MeetingAttendee[]   @relation("MeetingAttendees")
  assignedActionItems MeetingActionItem[] @relation("ActionItemAssignee")

  @@index([email])
  @@index([role])
  @@index([deletedAt])
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique // e.g., 'create_project', 'view_financials'
  description String?
  category    String? // e.g., 'projects', 'users', 'financials'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([name])
  @@index([category])
}

model RolePermission {
  id           String   @id @default(uuid())
  role         Role
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
}

model UserPermission {
  id           String    @id @default(uuid())
  userId       String
  permissionId String
  grantedBy    String? // User ID who granted this permission
  expiresAt    DateTime? // Optional expiration
  createdAt    DateTime  @default(now())

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([expiresAt])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String? // Null for system actions
  action     String // e.g., 'LOGIN', 'CREATE_PROJECT', 'PERMISSION_GRANTED'
  resource   String? // e.g., 'USER', 'PROJECT', 'CLIENT'
  resourceId String? // ID of the affected resource
  details    String? // JSON string with additional details
  ipAddress  String?
  userAgent  String?
  success    Boolean  @default(true)
  createdAt  DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  company   String?
  website   String?
  timezone  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete capability

  // Relations
  projects         Project[]
  invoices         Invoice[]
  contactLogs      ContactLog[]
  billingContracts BillingContract[]
  paymentConfigs   PaymentConfig[]
  Deal             Deal[]
  meetings         Meeting[]
  meetingAttendances MeetingAttendee[]

  @@index([email])
  @@index([name])
  @@index([deletedAt])
}

model Project {
  id              String             @id @default(uuid())
  name            String
  description     String?
  status          ProjectStatus      @default(PLANNING)
  priority        Priority           @default(MEDIUM)
  methodology     ProjectMethodology @default(AGILE)
  templateId      String? // Reference to template used
  budget          Float
  budgetUsed      Float              @default(0)
  hourlyRate      Float
  startDate       DateTime?
  endDate         DateTime?
  estimatedHours  Int?
  actualHours     Int?
  completionRate  Int                @default(0) // Percentage
  isClientVisible Boolean            @default(true)
  riskTolerance   String? // Low, Medium, High
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime? // Soft delete capability

  // Relations
  clientId    String
  managerId   String? // Project manager ID
  client      Client           @relation(fields: [clientId], references: [id])
  manager     User?            @relation("ProjectManager", fields: [managerId], references: [id])
  template    ProjectTemplate? @relation("ProjectFromTemplate", fields: [templateId], references: [id])
  users       User[]
  teams       Team[]
  tasks       Task[]
  timeEntries TimeEntry[]
  invoices    Invoice[]
  messages    Message[]
  documents   Document[]
  teamMembers TeamMember[]

  // Advanced Project Management Relations
  risks               ProjectRisk[]
  milestones          ProjectMilestone[]
  changeRequests      ChangeRequest[]
  resourceAllocations ResourceAllocation[]
  communications      ProjectCommunication[]
  projectDocuments    ProjectDocument[]
  budgetItems         ProjectBudgetItem[]
  expenses            Expense[]
  billingContracts    BillingContract[]
  paymentConfigs      PaymentConfig[]

  // New messaging relations
  channels Channel[]
  
  // Notifications
  notifications Notification[]
  
  // Meeting relations
  meetings Meeting[]

  @@index([clientId])
  @@index([managerId])
  @@index([status])
  @@index([priority])
  @@index([methodology])
  @@index([templateId])
  @@index([startDate, endDate])
  @@index([deletedAt])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime? // Soft delete capability
  users       User[]
  projects    Project[]
  teamMembers TeamMember[]

  @@index([name])
  @@index([deletedAt])
}

// IT Services Platform Models
model TimeEntry {
  id          String          @id @default(uuid())
  userId      String
  taskId      String?
  projectId   String?
  invoiceId   String? // Reference to invoice when billed
  hours       Float
  duration    Float? // Duration in hours (for compatibility)
  billable    Boolean         @default(true)
  date        DateTime
  description String?
  rate        Float
  amount      Float
  status      TimeEntryStatus @default(DRAFT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  task    Task?    @relation(fields: [taskId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  @@index([userId])
  @@index([taskId])
  @@index([projectId])
  @@index([date])
  @@index([billable])
}

model Invoice {
  id                  String        @id @default(uuid())
  clientId            String
  projectId           String?
  invoiceNumber       String        @unique
  amount              Float
  taxAmount           Float         @default(0)
  discountAmount      Float         @default(0)
  total               Float
  currency            String        @default("USD")
  status              InvoiceStatus @default(DRAFT)
  billingType         BillingType   @default(HOURLY)
  dueDate             DateTime
  sentAt              DateTime?
  paidAt              DateTime?
  overdueAt           DateTime? // When invoice became overdue
  lastReminderAt      DateTime? // Last payment reminder sent
  lineItems           Json // Array of invoice line items
  notes               String?
  terms               String?
  paymentInstructions String? // Custom payment instructions
  metadata            Json? // Additional invoice data
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  client           Client            @relation(fields: [clientId], references: [id])
  project          Project?          @relation(fields: [projectId], references: [id])
  payments         Payment[]
  timeEntries      TimeEntry[]
  expenses         Expense[]
  paymentReminders PaymentReminder[]
  lateFees         LateFee[]

  @@index([clientId])
  @@index([projectId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@index([overdueAt])
}

model Payment {
  id               String        @id @default(uuid())
  invoiceId        String
  amount           Float
  currency         String        @default("USD")
  paymentMethod    PaymentMethod
  paymentReference String? // Stripe/PayPal transaction ID
  status           PaymentStatus @default(PENDING)
  processedAt      DateTime?
  failureReason    String? // Payment failure details
  refundAmount     Float? // Partial refund tracking
  refundReason     String? // Refund justification
  stripePaymentId  String? // Stripe Payment Intent ID
  paypalOrderId    String? // PayPal Order ID
  gatewayFees      Float? // Transaction fees charged by gateway
  metadata         Json? // Additional payment gateway data
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  invoice          Invoice           @relation(fields: [invoiceId], references: [id])
  paymentReminders PaymentReminder[]

  @@index([invoiceId])
  @@index([status])
  @@index([paymentMethod])
  @@index([stripePaymentId])
  @@index([paypalOrderId])
}

model PaymentReminder {
  id           String              @id @default(uuid())
  invoiceId    String
  paymentId    String? // Optional: linked to specific payment attempt
  type         PaymentReminderType
  sentAt       DateTime
  dueDate      DateTime
  amount       Float
  lateFee      Float               @default(0)
  reminderText String
  emailSent    Boolean             @default(false)
  smsGent      Boolean             @default(false)
  responded    Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relations
  invoice Invoice  @relation(fields: [invoiceId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([invoiceId])
  @@index([type])
  @@index([sentAt])
  @@index([dueDate])
}

model LateFee {
  id         String    @id @default(uuid())
  invoiceId  String
  amount     Float
  percentage Float? // Late fee as percentage of invoice
  flatFee    Float? // Fixed late fee amount
  appliedAt  DateTime
  reason     String
  waived     Boolean   @default(false)
  waivedAt   DateTime?
  waivedBy   String? // User ID who waived the fee
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
  @@index([appliedAt])
  @@index([waived])
}

model PaymentConfig {
  id                   String   @id @default(uuid())
  clientId             String? // Client-specific config
  projectId            String? // Project-specific config
  stripeEnabled        Boolean  @default(false)
  paypalEnabled        Boolean  @default(false)
  bankTransferEnabled  Boolean  @default(true)
  checkEnabled         Boolean  @default(true)
  stripePublishableKey String?
  stripeSecretKey      String? // Encrypted
  paypalClientId       String?
  paypalClientSecret   String? // Encrypted
  defaultCurrency      String   @default("USD")
  lateFeeEnabled       Boolean  @default(false)
  lateFeePercentage    Float? // Late fee as percentage
  lateFeeFlatAmount    Float? // Fixed late fee amount
  lateFeeGraceDays     Int      @default(0)
  reminderEnabled      Boolean  @default(true)
  reminderDaysBefore   Int      @default(3)
  reminderDaysAfter    Int      @default(7)
  bankAccountName      String?
  bankAccountNumber    String?
  bankRoutingNumber    String?
  bankSwiftCode        String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  client  Client?  @relation(fields: [clientId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@index([clientId])
  @@index([projectId])
}

model Expense {
  id          String          @id @default(uuid())
  projectId   String?
  userId      String
  invoiceId   String? // Reference to invoice when billed
  category    ExpenseCategory
  amount      Float
  currency    String          @default("USD")
  description String
  receiptUrl  String?
  date        DateTime
  reimbursed  Boolean         @default(false)
  billable    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([category])
  @@index([date])
}

model BillingContract {
  id             String       @id @default(uuid())
  clientId       String
  projectId      String?
  contractType   BillingType
  hourlyRate     Float?
  fixedAmount    Float?
  retainerAmount Float?
  billingCycle   BillingCycle @default(MONTHLY)
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean      @default(true)
  autoInvoice    Boolean      @default(true)
  metadata       Json? // Additional contract terms
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  client  Client   @relation(fields: [clientId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@index([clientId])
  @@index([projectId])
  @@index([contractType])
  @@index([isActive])
}

model Task {
  id             String     @id @default(uuid())
  projectId      String
  assigneeId     String?
  createdBy      String
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  dueDate        DateTime?
  startDate      DateTime?
  completedAt    DateTime?
  estimatedHours Int?
  actualHours    Int?
  progress       Int        @default(0) // Percentage 0-100
  tags           String? // JSON array of tags
  order          Int        @default(0)
  isBlocking     Boolean    @default(false) // Critical path task
  isMilestone    Boolean    @default(false)
  skillsRequired Json? // Array of required skills
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  project     Project     @relation(fields: [projectId], references: [id])
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User        @relation("TaskCreator", fields: [createdBy], references: [id])
  timeEntries TimeEntry[]

  // Task Dependency Relations
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependents   TaskDependency[] @relation("TaskDependents")

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdBy])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([isBlocking])
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  action     String // e.g., 'CREATE', 'UPDATE', 'DELETE'
  entityType String // e.g., 'PROJECT', 'TASK', 'CLIENT'
  entityId   String
  changes    String? // JSON object of changes
  ipAddress  String?
  userAgent  String?
  metadata   String? // JSON object for additional context
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([action])
}

model Message {
  id          String      @id @default(uuid())
  senderId    String
  receiverId  String? // Null for broadcast messages or channel messages
  channelId   String? // New: for channel-based messages
  projectId   String?
  subject     String?
  content     String
  messageType MessageType @default(DIRECT)
  priority    Priority    @default(MEDIUM)
  readAt      DateTime?
  parentId    String? // For threaded messages
  attachments String? // JSON array of attachment URLs
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  sender    User              @relation("MessageSender", fields: [senderId], references: [id])
  receiver  User?             @relation("MessageReceiver", fields: [receiverId], references: [id])
  channel   Channel?          @relation(fields: [channelId], references: [id])
  project   Project?          @relation(fields: [projectId], references: [id])
  parent    Message?          @relation("MessageThread", fields: [parentId], references: [id])
  replies   Message[]         @relation("MessageThread")
  reads     MessageRead[]
  reactions MessageReaction[]

  @@index([senderId])
  @@index([receiverId])
  @@index([channelId])
  @@index([projectId])
  @@index([createdAt])
  @@index([readAt])
}

model Channel {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        ChannelType @default(TEAM)
  isPrivate   Boolean     @default(false)
  projectId   String?
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  project   Project?  @relation(fields: [projectId], references: [id])
  createdBy User      @relation("ChannelCreator", fields: [createdById], references: [id])
  members   User[]    @relation("ChannelMembers")
  messages  Message[]

  @@unique([name, projectId]) // Channel names must be unique within a project
  @@index([projectId])
  @@index([type])
  @@index([createdAt])
}

model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation("UserMessageReads", fields: [userId], references: [id])

  @@unique([messageId, userId])
  @@index([userId])
  @@index([readAt])
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation("UserMessageReactions", fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  title       String
  message     String
  type        NotificationType @default(INFO)
  read        Boolean          @default(false)
  readAt      DateTime?
  relatedType String? // e.g., 'task', 'message', 'invoice', 'document', 'project'
  relatedId   String? // ID of the related entity
  projectId   String?
  actionUrl   String? // URL to navigate when notification is clicked
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user    User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([type])
  @@index([relatedType, relatedId])
  @@index([createdAt])
}

model Document {
  id            String   @id @default(uuid())
  projectId     String?
  userId        String
  filename      String
  originalName  String
  filePath      String
  fileSize      Int
  mimeType      String
  version       Int      @default(1)
  description   String?
  category      String? // e.g., 'CONTRACT', 'PROPOSAL', 'DELIVERABLE'
  isPublic      Boolean  @default(false)
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([filename])
  @@index([mimeType])
  @@index([category])
}

model TeamMember {
  id             String    @id @default(uuid())
  userId         String
  projectId      String?
  teamId         String?
  role           TeamRole  @default(MEMBER)
  hourlyRate     Float
  allocatedHours Int?
  capacity       Int? // Percentage of time allocated
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  team    Team?    @relation(fields: [teamId], references: [id])

  @@unique([userId, projectId])
  @@unique([userId, teamId])
  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([role])
}

model Lead {
  id                  String     @id @default(uuid())
  companyName         String
  contactName         String
  email               String
  phone               String?
  website             String?
  source              LeadSource @default(WEBSITE)
  status              LeadStatus @default(NEW)
  value               Float
  notes               String?
  assignedTo          String? // User ID of assigned sales member
  lastContact         DateTime?
  nextFollowUp        DateTime?
  qualificationScore  Int        @default(0) // Lead scoring
  companySize         Int? // Number of employees
  budget              Float?
  timeline            String? // e.g., 'Q4 2025'
  emailCampaignStatus String? // JSON: { sent: true, opened: false }
  convertedToClient   Boolean    @default(false)
  convertedAt         DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  deals      Deal[]
  activities LeadActivity[]

  @@index([email])
  @@index([status])
  @@index([source])
  @@index([assignedTo])
  @@index([nextFollowUp])
  @@index([qualificationScore])
}

model Deal {
  id          String    @id @default(uuid())
  leadId      String
  title       String
  value       Float
  stage       DealStage @default(PROSPECT)
  probability Int       @default(0) // Percentage
  closeDate   DateTime?
  wonAt       DateTime?
  lostAt      DateTime?
  lostReason  String?
  description String?
  assignedTo  String? // User ID of assigned sales member
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clientId    String? // Conversion: link to Client

  // Relations
  lead   Lead    @relation(fields: [leadId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  @@index([leadId])
  @@index([stage])
  @@index([closeDate])
  @@index([assignedTo])
  @@index([clientId])
}

// Lead Activity Log for tracking actions (calls, emails, notes)
model LeadActivity {
  id          String    @id @default(uuid())
  leadId      String
  userId      String // Sales team member
  type        String // e.g., 'CALL', 'EMAIL', 'NOTE', 'MEETING'
  subject     String?
  content     String?
  outcome     String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([leadId])
  @@index([userId])
  @@index([type])
  @@index([scheduledAt])
  @@index([createdAt])
}

model ContactLog {
  id          String      @id @default(uuid())
  clientId    String
  userId      String
  type        ContactType @default(EMAIL)
  subject     String?
  content     String
  outcome     String?
  nextAction  String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())

  // Relations
  client Client @relation(fields: [clientId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
  @@index([type])
  @@index([scheduledAt])
  @@index([createdAt])
}

model ResourceProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  skills          String // JSON array of skills
  hourlyRate      Float
  currency        String   @default("USD")
  capacity        Int      @default(40) // Hours per week
  availability    String // JSON object with availability schedule
  timezone        String?
  bio             String?
  resume          String? // URL to resume file
  portfolio       String? // URL to portfolio
  languages       String? // JSON array of languages
  certifications  String? // JSON array of certifications
  yearsExperience Int?
  isAvailable     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([hourlyRate])
  @@index([isAvailable])
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
  CLIENT
  USER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  TESTING
  DONE
  CANCELLED
}

enum TimeEntryStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TeamRole {
  LEAD
  SENIOR
  MEMBER
  OBSERVER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  COLD_CALL
  TRADE_SHOW
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum DealStage {
  PROSPECT
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ContactType {
  EMAIL
  PHONE
  MEETING
  VIDEO_CALL
  MESSAGE
  OTHER
}

enum MessageType {
  DIRECT
  BROADCAST
  NOTIFICATION
  SYSTEM
  REPLY
}

enum ChannelType {
  TEAM
  PROJECT
  DIRECT
  GENERAL
  ADMIN
  CLIENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK
  MESSAGE
  BILLING
  DOCUMENT
  PROJECT_UPDATE
  SYSTEM
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  BANK_TRANSFER
  CHECK
  WIRE_TRANSFER
  CASH
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PARTIALLY_PAID
  CHARGEBACK
}

enum PaymentReminderType {
  BEFORE_DUE
  ON_DUE_DATE
  OVERDUE_1ST
  OVERDUE_2ND
  OVERDUE_FINAL
  CUSTOM
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  OFFICE_SUPPLIES
  SOFTWARE
  HARDWARE
  MARKETING
  PROFESSIONAL_SERVICES
  TRAINING
  UTILITIES
  RENT
  INSURANCE
  OTHER
}

enum BillingType {
  HOURLY
  FIXED_FEE
  RETAINER
  SUBSCRIPTION
  MILESTONE_BASED
  MIXED
}

enum BillingCycle {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

// NextAuth.js Models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

// Content Management Models
model ContentSection {
  id         String   @id @default(uuid())
  sectionKey String   @unique // e.g., 'hero', 'about', 'services'
  title      String?
  subtitle   String?
  content    String? // JSON string for complex content
  imageUrl   String?
  isActive   Boolean  @default(true)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  title       String
  description String
  icon        String?
  imageUrl    String?
  features    String? // JSON array of features
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PortfolioItem {
  id            String   @id @default(uuid())
  title         String
  slug          String?  @unique
  description   String
  category      String
  client        String?
  technologies  String? // JSON array of technologies
  imageUrl      String
  featuredImage String? // For compatibility with frontend
  projectUrl    String?
  liveUrl       String? // For compatibility with frontend
  githubUrl     String?
  featured      Boolean  @default(false)
  published     Boolean  @default(true)
  isActive      Boolean  @default(true)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BlogPost {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  author      String
  imageUrl    String?
  tags        String? // JSON array of tags
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MediaAsset {
  id           String   @id @default(uuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  alt          String?
  category     String? // e.g., 'portfolio', 'blog', 'content'
  uploadedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Enhanced Content Management Models for Dynamic Content Types
model ContentType {
  id            String   @id @default(uuid())
  name          String   @unique // e.g., 'hero', 'feature', 'testimonial'
  label         String // Display name
  description   String?
  icon          String?
  fields        String // JSON string of ContentField[] - Enhanced field definitions
  settings      String? // JSON string of content type settings (layout, validation, etc.)
  category      String? // Category for organization (e.g., 'sections', 'components', 'pages')
  template      String? // Optional template identifier for rendering
  isSystem      Boolean  @default(false) // Whether this is a system-defined content type
  isActive      Boolean  @default(true)
  allowMultiple Boolean  @default(true) // Whether multiple instances can be created
  maxInstances  Int? // Maximum number of instances allowed (null = unlimited)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  contentItems    DynamicContentItem[]
  contentSections DynamicContentSection[]

  @@index([category, isActive])
  @@index([isSystem, isActive])
}

model DynamicContentItem {
  id            String    @id @default(uuid())
  contentTypeId String
  slug          String?
  title         String
  data          String // JSON string containing dynamic field data
  status        String    @default("draft") // 'draft' | 'published' | 'archived'
  featured      Boolean   @default(false)
  publishedAt   DateTime?
  order         Int       @default(0)
  categories    String? // JSON array of categories
  tags          String? // JSON array of tags
  author        String?
  metadata      String? // JSON string for SEO metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  contentType ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)

  @@unique([contentTypeId, slug])
  @@index([contentTypeId, status])
  @@index([contentTypeId, featured])
  @@index([status, publishedAt])
}

model DynamicContentSection {
  id             String   @id @default(uuid())
  contentTypeId  String
  sectionKey     String   @unique // e.g., 'homepage-hero', 'about-features'
  title          String?
  subtitle       String?
  description    String?
  imageUrl       String? // URL for section image
  layoutSettings String // JSON string for layout configuration
  contentData    String? // JSON string for dynamic field content
  isActive       Boolean  @default(true)
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  contentType ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)

  @@index([contentTypeId, isActive])
  @@index([sectionKey, isActive])
}

// Page Management Model
model Page {
  id              String   @id @default(uuid())
  slug            String   @unique // URL slug e.g., 'home', 'about', 'services'
  title           String // Display title e.g., 'Home Page', 'About Us'
  description     String? // Optional description for admin/SEO
  path            String // Full path e.g., '/', '/about', '/services'
  isActive        Boolean  @default(true)
  isSystem        Boolean  @default(false) // Whether this is a system page (cannot be deleted)
  order           Int      @default(0)
  metaTitle       String? // SEO meta title
  metaDescription String? // SEO meta description
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([slug, isActive])
  @@index([isActive, order])
}

// Advanced Project Management Models

// Project Templates for different methodologies
model ProjectTemplate {
  id                 String             @id @default(uuid())
  name               String
  description        String?
  methodology        ProjectMethodology
  industry           String?
  estimatedDuration  Int? // in days
  tasksTemplate      Json? // Template for default tasks
  milestonesTemplate Json? // Template for milestones
  riskTemplate       Json? // Common risks for this template
  resourceTemplate   Json? // Resource requirements template
  budgetTemplate     Json? // Budget breakdown template
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relations
  projects Project[] @relation("ProjectFromTemplate")

  @@index([methodology])
  @@index([isActive])
}

// Task Dependencies for Gantt chart functionality
model TaskDependency {
  id              String         @id @default(uuid())
  taskId          String
  dependsOnTaskId String
  dependencyType  DependencyType @default(FINISH_TO_START)
  lagDays         Int            @default(0) // Lag time in days
  createdAt       DateTime       @default(now())

  // Relations
  task          Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask Task @relation("TaskDependents", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnTaskId])
  @@index([taskId])
  @@index([dependsOnTaskId])
}

// Project Risk Management
model ProjectRisk {
  id               String       @id @default(uuid())
  projectId        String
  title            String
  description      String?
  category         RiskCategory @default(TECHNICAL)
  impactScore      Int // 1-5 scale (constraints enforced in application layer)
  probabilityScore Int // 1-5 scale (constraints enforced in application layer)
  riskScore        Int // Auto-calculated: impact * probability
  status           RiskStatus   @default(OPEN)
  mitigationPlan   String?
  contingencyPlan  String?
  ownerId          String? // Risk owner
  identifiedBy     String
  identifiedAt     DateTime     @default(now())
  reviewDate       DateTime?
  closedAt         DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  owner      User?   @relation("RiskOwner", fields: [ownerId], references: [id])
  identifier User    @relation("RiskIdentifier", fields: [identifiedBy], references: [id])

  @@index([projectId])
  @@index([status])
  @@index([riskScore])
}

// Project Milestones
model ProjectMilestone {
  id           String          @id @default(uuid())
  projectId    String
  title        String
  description  String?
  targetDate   DateTime
  actualDate   DateTime?
  status       MilestoneStatus @default(PENDING)
  order        Int             @default(0)
  isKey        Boolean         @default(false) // Key milestone for client reporting
  deliverables Json? // Array of deliverable descriptions
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([targetDate])
  @@index([status])
}

// Change Requests
model ChangeRequest {
  id             String              @id @default(uuid())
  projectId      String
  requestedBy    String
  title          String
  description    String
  reason         String
  impact         String? // Impact analysis
  estimatedCost  Float?
  estimatedHours Int?
  estimatedDays  Int?
  priority       Priority            @default(MEDIUM)
  status         ChangeRequestStatus @default(PENDING)
  approvedBy     String?
  approvedAt     DateTime?
  implementedAt  DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  requester User    @relation("ChangeRequester", fields: [requestedBy], references: [id])
  approver  User?   @relation("ChangeApprover", fields: [approvedBy], references: [id])

  @@index([projectId])
  @@index([status])
  @@index([priority])
}

// Resource Allocation for workload management
model ResourceAllocation {
  id                   String    @id @default(uuid())
  projectId            String
  userId               String
  role                 String? // Role in the project
  allocationPercentage Float // Percentage of time allocated (0-100)
  hourlyRate           Float?
  startDate            DateTime
  endDate              DateTime?
  isActive             Boolean   @default(true)
  skills               Json? // Array of required/utilized skills
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation("ResourceAllocations", fields: [userId], references: [id])

  @@unique([projectId, userId, startDate])
  @@index([projectId])
  @@index([userId])
  @@index([startDate, endDate])
}

// Project Communications
model ProjectCommunication {
  id              String            @id @default(uuid())
  projectId       String
  type            CommunicationType @default(UPDATE)
  subject         String
  content         String
  senderId        String
  recipients      Json // Array of user IDs
  isClientVisible Boolean           @default(false)
  attachments     Json? // Array of file references
  scheduledFor    DateTime? // For scheduled communications
  sentAt          DateTime?
  createdAt       DateTime          @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender  User    @relation("CommunicationSender", fields: [senderId], references: [id])

  @@index([projectId])
  @@index([type])
  @@index([isClientVisible])
  @@index([sentAt])
}

// Project Documents with version control
model ProjectDocument {
  id               String           @id @default(uuid())
  projectId        String
  name             String
  description      String?
  filePath         String
  fileSize         BigInt
  mimeType         String
  version          String           @default("1.0")
  isLatest         Boolean          @default(true)
  category         DocumentCategory @default(GENERAL)
  isClientVisible  Boolean          @default(false)
  uploadedBy       String
  parentDocumentId String? // For version tracking
  metadata         Json? // Additional file metadata
  createdAt        DateTime         @default(now())

  // Relations
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader       User              @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  parentDocument ProjectDocument?  @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  versions       ProjectDocument[] @relation("DocumentVersions")

  @@index([projectId])
  @@index([category])
  @@index([isClientVisible])
  @@index([isLatest])
}

// Project Budget Tracking
model ProjectBudgetItem {
  id                 String         @id @default(uuid())
  projectId          String
  category           BudgetCategory
  name               String
  description        String?
  budgetedAmount     Float
  actualAmount       Float          @default(0)
  variance           Float          @default(0) // Calculated field
  isRecurring        Boolean        @default(false)
  recurringFrequency String? // monthly, weekly, etc.
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([category])
}

// Enhanced Enums for Advanced Project Management
enum ProjectMethodology {
  AGILE
  WATERFALL
  HYBRID
  KANBAN
  SCRUM
  LEAN
  PRINCE2
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum RiskCategory {
  TECHNICAL
  BUSINESS
  RESOURCE
  SCHEDULE
  BUDGET
  EXTERNAL
  QUALITY
  COMMUNICATION
}

enum RiskStatus {
  OPEN
  MITIGATED
  CLOSED
  MONITORING
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum ChangeRequestStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
  CANCELLED
}

enum CommunicationType {
  UPDATE
  ANNOUNCEMENT
  ALERT
  REMINDER
  REPORT
  MEETING_MINUTES
}

enum DocumentCategory {
  GENERAL
  REQUIREMENTS
  DESIGN
  DEVELOPMENT
  TESTING
  DEPLOYMENT
  CONTRACTS
  REPORTS
  PRESENTATIONS
}

enum BudgetCategory {
  LABOR
  MATERIALS
  EQUIPMENT
  SOFTWARE
  TRAVEL
  TRAINING
  OVERHEAD
  CONTINGENCY
}

// Tools & Integrations Management
model Integration {
  id            String             @id @default(uuid())
  name          String
  type          IntegrationType
  category      IntegrationCategory
  description   String?
  isEnabled     Boolean            @default(false)
  configuration Json? // Encrypted configuration data
  apiKey        String? // Encrypted API key
  webhookUrl    String?
  lastSyncAt    DateTime?
  status        IntegrationStatus  @default(INACTIVE)
  errorMessage  String?
  syncFrequency String? // cron expression
  metadata      Json? // Additional metadata
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  logs IntegrationLog[]

  @@index([type])
  @@index([category])
  @@index([status])
  @@index([isEnabled])
}

model IntegrationLog {
  id            String      @id @default(uuid())
  integrationId String
  action        String // sync, test, enable, disable, configure
  status        String // success, error, warning
  message       String?
  metadata      Json?
  createdAt     DateTime    @default(now())

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([action])
  @@index([status])
  @@index([createdAt])
}

enum IntegrationType {
  SLACK
  GITHUB
  GOOGLE_ANALYTICS
  TRELLO
  ZOOM
  HUBSPOT
  JIRA
  DISCORD
  MICROSOFT_TEAMS
  ASANA
  LINEAR
  NOTION
  FIGMA
  STRIPE
  MAILCHIMP
}

enum IntegrationCategory {
  COMMUNICATION
  DEVELOPMENT
  ANALYTICS
  PROJECT_MANAGEMENT
  CRM
  MEETINGS
  DESIGN
  PAYMENTS
  MARKETING
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  SYNCING
  PENDING
}

// Meeting and Calendar Models
enum MeetingType {
  IN_PERSON
  VIDEO_CALL
  PHONE_CALL
  CONFERENCE
}

enum MeetingStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  IN_PROGRESS
  RESCHEDULED
  NO_SHOW
}

enum AttendeeStatus {
  INVITED
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model Meeting {
  id          String        @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  duration    Int // Duration in minutes
  type        MeetingType   @default(VIDEO_CALL)
  status      MeetingStatus @default(SCHEDULED)
  location    String? // Physical location or meeting link
  timezone    String        @default("UTC")

  // Organizer
  organizerId String
  organizer   User   @relation("MeetingOrganizer", fields: [organizerId], references: [id])

  // Project association (optional)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  // Client association (optional)
  clientId String?
  client   Client?  @relation(fields: [clientId], references: [id])

  // Recurrence settings
  isRecurring       Boolean              @default(false)
  recurrenceRule    String? // RRULE format
  recurrenceFreq    RecurrenceFrequency?
  recurrenceEnd     DateTime?
  parentMeetingId   String? // For recurring meeting instances
  recurringMeetings Meeting[]            @relation("RecurringInstances")
  parentMeeting     Meeting?             @relation("RecurringInstances", fields: [parentMeetingId], references: [id])

  // Meeting content
  agenda       String? // JSON array of agenda items
  notes        String? // Meeting notes/minutes
  recordingUrl String?
  attachments  String? // JSON array of attachment URLs

  // Metadata
  reminderSent Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  attendees   MeetingAttendee[]
  actionItems MeetingActionItem[]

  @@index([organizerId])
  @@index([projectId])
  @@index([clientId])
  @@index([startTime])
  @@index([status])
  @@index([type])
}

model MeetingAttendee {
  id        String         @id @default(uuid())
  meetingId String
  userId    String?
  clientId  String?
  email     String? // For external attendees
  name      String? // For external attendees
  status    AttendeeStatus @default(INVITED)
  isRequired Boolean       @default(true)
  attended  Boolean        @default(false)
  joinedAt  DateTime?
  leftAt    DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User?   @relation("MeetingAttendees", fields: [userId], references: [id])
  client  Client? @relation(fields: [clientId], references: [id])

  @@index([meetingId])
  @@index([userId])
  @@index([clientId])
  @@index([status])
}

model MeetingActionItem {
  id          String    @id @default(uuid())
  meetingId   String
  title       String
  description String?
  assigneeId  String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  meeting  Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  assignee User?   @relation("ActionItemAssignee", fields: [assigneeId], references: [id])

  @@index([meetingId])
  @@index([assigneeId])
  @@index([dueDate])
  @@index([completed])
}

// ============================================================================
// REPORTING SYSTEM MODELS
// ============================================================================

enum ReportType {
  PROJECT_STATUS
  PROJECT_TIMELINE
  TASK_COMPLETION
  RESOURCE_ALLOCATION
  RISK_ASSESSMENT
  REVENUE_BY_PROJECT
  PROFITABILITY_ANALYSIS
  BUDGET_VS_ACTUAL
  INVOICE_STATUS
  PAYMENT_COLLECTION
  TEAM_PRODUCTIVITY
  INDIVIDUAL_PERFORMANCE
  TIME_TRACKING
  WORKLOAD_DISTRIBUTION
  SKILL_UTILIZATION
  CLIENT_SATISFACTION
  PROJECT_DELIVERABLES
  COMMUNICATION_LOGS
  SERVICE_LEVEL
  CUSTOM
}

enum ReportCategory {
  PROJECTS
  FINANCIAL
  TEAM
  CLIENTS
  TIME
  CUSTOM
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  JSON
}

enum ReportStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  SCHEDULED
}

enum ReportFrequency {
  ONCE
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model ReportTemplate {
  id          String         @id @default(uuid())
  name        String
  description String?
  category    ReportCategory
  type        ReportType
  isBuiltIn   Boolean        @default(false) // Pre-built templates vs custom
  isActive    Boolean        @default(true)
  
  // Template configuration
  config      Json // Data sources, filters, chart types, formatting options
  layout      Json? // Report layout configuration
  
  // Metadata
  createdBy   String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  reports     Report[]
  schedules   ReportSchedule[]
  
  @@index([category])
  @@index([type])
  @@index([isBuiltIn])
  @@index([isActive])
}

model Report {
  id           String       @id @default(uuid())
  name         String
  description  String?
  category     ReportCategory
  type         ReportType
  status       ReportStatus @default(DRAFT)
  
  // Report configuration
  templateId   String?
  template     ReportTemplate? @relation(fields: [templateId], references: [id])
  config       Json // Filters, date ranges, data sources
  
  // Generated data
  data         Json? // Report data
  metadata     Json? // Statistics, totals, summaries
  
  // File storage
  pdfUrl       String? // URL to generated PDF
  excelUrl     String? // URL to generated Excel file
  csvUrl       String? // URL to generated CSV file
  fileSize     Int? // File size in bytes
  
  // Generation info
  generatedAt  DateTime?
  generatedBy  String?
  generationTime Int? // Time taken in milliseconds
  
  // Error tracking
  error        String? // Error message if generation failed
  retryCount   Int @default(0)
  
  // Access control
  isPublic     Boolean @default(false)
  sharedWith   String[] // Array of user IDs
  
  // Metadata
  viewCount    Int @default(0)
  downloadCount Int @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime? // Auto-delete old reports
  
  // Relations
  scheduleId   String?
  schedule     ReportSchedule? @relation(fields: [scheduleId], references: [id])
  
  @@index([category])
  @@index([type])
  @@index([status])
  @@index([templateId])
  @@index([scheduleId])
  @@index([generatedAt])
  @@index([expiresAt])
}

model ReportSchedule {
  id          String          @id @default(uuid())
  name        String
  description String?
  
  // Template and configuration
  templateId  String
  template    ReportTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  config      Json // Filters, parameters
  
  // Schedule settings
  frequency   ReportFrequency
  cronExpression String? // For custom schedules
  timezone    String @default("UTC")
  
  // Delivery settings
  format      ReportFormat
  recipients  String[] // Array of email addresses
  emailSubject String?
  emailBody   String?
  
  // Execution info
  isActive    Boolean @default(true)
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  lastStatus  String? // Success, Failed
  failureCount Int @default(0)
  
  // Metadata
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reports     Report[]
  
  @@index([templateId])
  @@index([frequency])
  @@index([isActive])
  @@index([nextRunAt])
}

model ReportCache {
  id          String   @id @default(uuid())
  cacheKey    String   @unique // Hash of report type + filters
  category    ReportCategory
  type        ReportType
  data        Json // Cached report data
  metadata    Json? // Cached statistics
  
  // Cache management
  hitCount    Int @default(0)
  lastAccess  DateTime @default(now())
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  @@index([cacheKey])
  @@index([category])
  @@index([type])
  @@index([expiresAt])
  @@index([lastAccess])
}
