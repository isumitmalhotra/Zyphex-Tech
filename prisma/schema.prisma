// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your models here
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete capability
  
  // Existing relations
  projects      Project[]
  teams         Team[]
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  image         String?
  
  // New relations for IT Services Platform
  timeEntries       TimeEntry[]
  assignedTasks     Task[] @relation("TaskAssignee")
  createdTasks      Task[] @relation("TaskCreator")
  activityLogs      ActivityLog[]
  sentMessages      Message[] @relation("MessageSender")
  receivedMessages  Message[] @relation("MessageReceiver")
  documents         Document[]
  teamMemberships   TeamMember[]
  contactLogs       ContactLog[]
  resourceProfile   ResourceProfile?
  
  @@index([email])
  @@index([role])
  @@index([deletedAt])
}

model Client {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       String?
  address     String?
  company     String?
  website     String?
  timezone    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete capability
  
  // Relations
  projects    Project[]
  invoices    Invoice[]
  contactLogs ContactLog[]
  
  @@index([email])
  @@index([name])
  @@index([deletedAt])
}

model Project {
  id              String    @id @default(uuid())
  name            String
  description     String?
  status          ProjectStatus @default(PLANNING)
  priority        Priority  @default(MEDIUM)
  budget          Decimal?  @db.Decimal(12, 2)
  budgetUsed      Decimal?  @db.Decimal(12, 2) @default(0)
  hourlyRate      Decimal?  @db.Decimal(8, 2)
  startDate       DateTime?
  endDate         DateTime?
  estimatedHours  Int?
  actualHours     Int?
  completionRate  Int       @default(0) // Percentage
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete capability
  
  // Relations
  clientId        String
  client          Client    @relation(fields: [clientId], references: [id])
  users           User[]
  teams           Team[]
  tasks           Task[]
  timeEntries     TimeEntry[]
  invoices        Invoice[]
  messages        Message[]
  documents       Document[]
  teamMembers     TeamMember[]
  
  @@index([clientId])
  @@index([status])
  @@index([priority])
  @@index([startDate, endDate])
  @@index([deletedAt])
}

model Team {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete capability
  users       User[]
  projects    Project[]
  teamMembers TeamMember[]
  
  @@index([name])
  @@index([deletedAt])
}

// IT Services Platform Models
model TimeEntry {
  id          String    @id @default(uuid())
  userId      String
  taskId      String?
  projectId   String?
  hours       Decimal   @db.Decimal(5, 2)
  billable    Boolean   @default(true)
  date        DateTime
  description String?
  rate        Decimal?  @db.Decimal(8, 2)
  amount      Decimal?  @db.Decimal(10, 2)
  status      TimeEntryStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  
  @@index([userId])
  @@index([taskId])
  @@index([projectId])
  @@index([date])
  @@index([billable])
}

model Invoice {
  id          String    @id @default(uuid())
  clientId    String
  projectId   String?
  invoiceNumber String  @unique
  amount      Decimal   @db.Decimal(12, 2)
  tax         Decimal?  @db.Decimal(12, 2) @default(0)
  total       Decimal   @db.Decimal(12, 2)
  status      InvoiceStatus @default(DRAFT)
  dueDate     DateTime
  paidAt      DateTime?
  lineItems   String    // JSON array of line items
  notes       String?
  terms       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  client      Client    @relation(fields: [clientId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  
  @@index([clientId])
  @@index([projectId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
}

model Task {
  id            String    @id @default(uuid())
  projectId     String
  assigneeId    String?
  createdBy     String
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  priority      Priority  @default(MEDIUM)
  dueDate       DateTime?
  startDate     DateTime?
  completedAt   DateTime?
  estimatedHours Int?
  actualHours   Int?
  dependencies  String?   // JSON array of task IDs
  tags          String?   // JSON array of tags
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  project       Project   @relation(fields: [projectId], references: [id])
  assignee      User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator       User      @relation("TaskCreator", fields: [createdBy], references: [id])
  timeEntries   TimeEntry[]
  
  @@index([projectId])
  @@index([assigneeId])
  @@index([createdBy])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

model ActivityLog {
  id          String    @id @default(uuid())
  userId      String
  action      String    // e.g., 'CREATE', 'UPDATE', 'DELETE'
  entityType  String    // e.g., 'PROJECT', 'TASK', 'CLIENT'
  entityId    String
  changes     String?   // JSON object of changes
  ipAddress   String?
  userAgent   String?
  metadata    String?   // JSON object for additional context
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([action])
}

model Message {
  id          String    @id @default(uuid())
  senderId    String
  receiverId  String?   // Null for broadcast messages
  projectId   String?
  subject     String?
  content     String
  messageType MessageType @default(DIRECT)
  priority    Priority  @default(MEDIUM)
  readAt      DateTime?
  parentId    String?   // For threaded messages
  attachments String?   // JSON array of attachment URLs
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User?     @relation("MessageReceiver", fields: [receiverId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  parent      Message?  @relation("MessageThread", fields: [parentId], references: [id])
  replies     Message[] @relation("MessageThread")
  
  @@index([senderId])
  @@index([receiverId])
  @@index([projectId])
  @@index([createdAt])
  @@index([readAt])
}

model Document {
  id          String    @id @default(uuid())
  projectId   String?
  userId      String
  filename    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  version     Int       @default(1)
  description String?
  category    String?   // e.g., 'CONTRACT', 'PROPOSAL', 'DELIVERABLE'
  isPublic    Boolean   @default(false)
  downloadCount Int     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  project     Project?  @relation(fields: [projectId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([projectId])
  @@index([userId])
  @@index([filename])
  @@index([mimeType])
  @@index([category])
}

model TeamMember {
  id            String    @id @default(uuid())
  userId        String
  projectId     String?
  teamId        String?
  role          TeamRole  @default(MEMBER)
  hourlyRate    Decimal?  @db.Decimal(8, 2)
  allocatedHours Int?
  capacity      Int?      // Percentage of time allocated
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  project       Project?  @relation(fields: [projectId], references: [id])
  team          Team?     @relation(fields: [teamId], references: [id])
  
  @@unique([userId, projectId])
  @@unique([userId, teamId])
  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([role])
}

model Lead {
  id          String    @id @default(uuid())
  companyName String
  contactName String
  email       String
  phone       String?
  website     String?
  source      LeadSource @default(WEBSITE)
  status      LeadStatus @default(NEW)
  value       Decimal?  @db.Decimal(12, 2)
  notes       String?
  assignedTo  String?
  lastContact DateTime?
  nextFollowUp DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  deals       Deal[]
  
  @@index([email])
  @@index([status])
  @@index([source])
  @@index([assignedTo])
  @@index([nextFollowUp])
}

model Deal {
  id          String    @id @default(uuid())
  leadId      String
  title       String
  value       Decimal   @db.Decimal(12, 2)
  stage       DealStage @default(PROSPECT)
  probability Int       @default(0) // Percentage
  closeDate   DateTime?
  wonAt       DateTime?
  lostAt      DateTime?
  lostReason  String?
  description String?
  assignedTo  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  lead        Lead      @relation(fields: [leadId], references: [id])
  
  @@index([leadId])
  @@index([stage])
  @@index([closeDate])
  @@index([assignedTo])
}

model ContactLog {
  id          String    @id @default(uuid())
  clientId    String
  userId      String
  type        ContactType @default(EMAIL)
  subject     String?
  content     String
  outcome     String?
  nextAction  String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  
  // Relations
  client      Client    @relation(fields: [clientId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([clientId])
  @@index([userId])
  @@index([type])
  @@index([scheduledAt])
  @@index([createdAt])
}

model ResourceProfile {
  id            String    @id @default(uuid())
  userId        String    @unique
  skills        String    // JSON array of skills
  hourlyRate    Decimal?  @db.Decimal(8, 2)
  currency      String    @default("USD")
  capacity      Int       @default(40) // Hours per week
  availability  String    // JSON object with availability schedule
  timezone      String?
  bio           String?
  resume        String?   // URL to resume file
  portfolio     String?   // URL to portfolio
  languages     String?   // JSON array of languages
  certifications String?  // JSON array of certifications
  yearsExperience Int?
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([hourlyRate])
  @@index([isAvailable])
}

// Enums
enum Role {
  ADMIN
  MANAGER
  DEVELOPER
  CLIENT
  USER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  TESTING
  DONE
  CANCELLED
}

enum TimeEntryStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TeamRole {
  LEAD
  SENIOR
  MEMBER
  OBSERVER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  COLD_CALL
  TRADE_SHOW
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum DealStage {
  PROSPECT
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ContactType {
  EMAIL
  PHONE
  MEETING
  VIDEO_CALL
  MESSAGE
  OTHER
}

enum MessageType {
  DIRECT
  BROADCAST
  NOTIFICATION
  SYSTEM
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

// Content Management Models
model ContentSection {
  id          String   @id @default(uuid())
  sectionKey  String   @unique // e.g., 'hero', 'about', 'services'
  title       String?
  subtitle    String?
  content     String?  // JSON string for complex content
  imageUrl    String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  title       String
  description String
  icon        String?
  imageUrl    String?
  features    String?  // JSON array of features
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PortfolioItem {
  id          String   @id @default(uuid())
  title       String
  slug        String?  @unique
  description String
  category    String
  client      String?
  technologies String? // JSON array of technologies
  imageUrl    String
  featuredImage String? // For compatibility with frontend
  projectUrl  String?
  liveUrl     String? // For compatibility with frontend
  githubUrl   String?
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  author      String
  imageUrl    String?
  tags        String?  // JSON array of tags
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MediaAsset {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  category    String?  // e.g., 'portfolio', 'blog', 'content'
  uploadedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Enhanced Content Management Models for Dynamic Content Types
model ContentType {
  id          String   @id @default(uuid())
  name        String   @unique // e.g., 'hero', 'feature', 'testimonial'
  label       String   // Display name
  description String?
  icon        String?
  fields      String   // JSON string of ContentField[] - Enhanced field definitions
  settings    String?  // JSON string of content type settings (layout, validation, etc.)
  category    String?  // Category for organization (e.g., 'sections', 'components', 'pages')
  template    String?  // Optional template identifier for rendering
  isSystem    Boolean  @default(false) // Whether this is a system-defined content type
  isActive    Boolean  @default(true)
  allowMultiple Boolean @default(true) // Whether multiple instances can be created
  maxInstances Int?    // Maximum number of instances allowed (null = unlimited)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  contentItems     DynamicContentItem[]
  contentSections  DynamicContentSection[]
  
  @@index([category, isActive])
  @@index([isSystem, isActive])
}

model DynamicContentItem {
  id            String   @id @default(uuid())
  contentTypeId String
  slug          String?
  title         String
  data          String   // JSON string containing dynamic field data
  status        String   @default("draft") // 'draft' | 'published' | 'archived'
  featured      Boolean  @default(false)
  publishedAt   DateTime?
  order         Int      @default(0)
  categories    String?  // JSON array of categories
  tags          String?  // JSON array of tags
  author        String?
  metadata      String?  // JSON string for SEO metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  contentType   ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  @@unique([contentTypeId, slug])
  @@index([contentTypeId, status])
  @@index([contentTypeId, featured])
  @@index([status, publishedAt])
}

model DynamicContentSection {
  id             String   @id @default(uuid())
  contentTypeId  String
  sectionKey     String   @unique // e.g., 'homepage-hero', 'about-features'
  title          String?
  subtitle       String?
  description    String?
  imageUrl       String?  // URL for section image
  layoutSettings String   // JSON string for layout configuration
  contentData    String?  // JSON string for dynamic field content
  isActive       Boolean  @default(true)
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  contentType    ContentType @relation(fields: [contentTypeId], references: [id], onDelete: Cascade)
  
  @@index([contentTypeId, isActive])
  @@index([sectionKey, isActive])
}

// Page Management Model
model Page {
  id          String   @id @default(uuid())
  slug        String   @unique // URL slug e.g., 'home', 'about', 'services'
  title       String   // Display title e.g., 'Home Page', 'About Us'
  description String?  // Optional description for admin/SEO
  path        String   // Full path e.g., '/', '/about', '/services'
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // Whether this is a system page (cannot be deleted)
  order       Int      @default(0)
  metaTitle   String?  // SEO meta title
  metaDescription String? // SEO meta description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([slug, isActive])
  @@index([isActive, order])
}