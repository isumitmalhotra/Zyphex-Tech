"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  FileText,
  DollarSign,
  Users,
  UserCheck,
  Clock,
  TrendingUp,
  BarChart3,
  PieChart,
  Calendar,
  Search,
  Play,
  Eye,
  LucideIcon,
} from 'lucide-react';
import { toast } from 'sonner';
import Link from 'next/link';

interface ReportTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  type: string;
  isBuiltIn: boolean;
  icon: LucideIcon;
  color: string;
}

const BUILT_IN_TEMPLATES: ReportTemplate[] = [
  // Financial Reports
  {
    id: 'revenue-by-project',
    name: 'Revenue by Project',
    description: 'Analyze revenue generated by each project over time',
    category: 'FINANCIAL',
    type: 'REVENUE_BY_PROJECT',
    isBuiltIn: true,
    icon: DollarSign,
    color: 'text-green-600',
  },
  {
    id: 'profitability-analysis',
    name: 'Profitability Analysis',
    description: 'Compare project costs vs revenue to determine profitability',
    category: 'FINANCIAL',
    type: 'PROFITABILITY_ANALYSIS',
    isBuiltIn: true,
    icon: TrendingUp,
    color: 'text-emerald-600',
  },
  {
    id: 'invoice-aging',
    name: 'Invoice Aging Report',
    description: 'Track outstanding invoices and payment aging',
    category: 'FINANCIAL',
    type: 'INVOICE_STATUS',
    isBuiltIn: true,
    icon: FileText,
    color: 'text-orange-600',
  },
  {
    id: 'payment-collection',
    name: 'Payment Collection Report',
    description: 'Monitor payment collection rates and trends',
    category: 'FINANCIAL',
    type: 'PAYMENT_COLLECTION',
    isBuiltIn: true,
    icon: DollarSign,
    color: 'text-blue-600',
  },

  // Project Reports
  {
    id: 'project-timeline',
    name: 'Project Timeline (Gantt)',
    description: 'Visualize project schedules and milestones',
    category: 'PROJECTS',
    type: 'PROJECT_TIMELINE',
    isBuiltIn: true,
    icon: Calendar,
    color: 'text-purple-600',
  },
  {
    id: 'resource-utilization',
    name: 'Resource Utilization',
    description: 'Track team member allocation and capacity',
    category: 'PROJECTS',
    type: 'RESOURCE_ALLOCATION',
    isBuiltIn: true,
    icon: Users,
    color: 'text-indigo-600',
  },
  {
    id: 'task-completion-rate',
    name: 'Task Completion Rate',
    description: 'Analyze task completion metrics and trends',
    category: 'PROJECTS',
    type: 'TASK_COMPLETION',
    isBuiltIn: true,
    icon: BarChart3,
    color: 'text-cyan-600',
  },
  {
    id: 'budget-vs-actual',
    name: 'Budget vs Actual',
    description: 'Compare planned budget against actual expenses',
    category: 'PROJECTS',
    type: 'BUDGET_VS_ACTUAL',
    isBuiltIn: true,
    icon: PieChart,
    color: 'text-rose-600',
  },

  // Team Reports
  {
    id: 'team-productivity',
    name: 'Team Productivity',
    description: 'Measure team output and efficiency metrics',
    category: 'TEAM',
    type: 'TEAM_PRODUCTIVITY',
    isBuiltIn: true,
    icon: Users,
    color: 'text-violet-600',
  },
  {
    id: 'individual-performance',
    name: 'Individual Performance',
    description: 'Track individual contributor metrics and achievements',
    category: 'TEAM',
    type: 'INDIVIDUAL_PERFORMANCE',
    isBuiltIn: true,
    icon: UserCheck,
    color: 'text-fuchsia-600',
  },
  {
    id: 'workload-distribution',
    name: 'Workload Distribution',
    description: 'Analyze task and project distribution across team',
    category: 'TEAM',
    type: 'WORKLOAD_DISTRIBUTION',
    isBuiltIn: true,
    icon: BarChart3,
    color: 'text-amber-600',
  },
  {
    id: 'time-tracking-summary',
    name: 'Time Tracking Summary',
    description: 'Summarize time entries by project, task, and user',
    category: 'TIME',
    type: 'TIME_TRACKING',
    isBuiltIn: true,
    icon: Clock,
    color: 'text-teal-600',
  },

  // Client Reports
  {
    id: 'client-project-history',
    name: 'Client Project History',
    description: 'View all projects for a specific client',
    category: 'CLIENTS',
    type: 'PROJECT_STATUS',
    isBuiltIn: true,
    icon: FileText,
    color: 'text-sky-600',
  },
  {
    id: 'client-satisfaction',
    name: 'Client Satisfaction Metrics',
    description: 'Track client feedback and satisfaction scores',
    category: 'CLIENTS',
    type: 'CLIENT_SATISFACTION',
    isBuiltIn: true,
    icon: Users,
    color: 'text-pink-600',
  },
];

const CATEGORY_LABELS: Record<string, string> = {
  FINANCIAL: 'Financial',
  PROJECTS: 'Projects',
  TEAM: 'Team',
  CLIENTS: 'Clients',
  TIME: 'Time Tracking',
};

export default function ReportTemplatesPage() {
  const templates = BUILT_IN_TEMPLATES;
  const [filteredTemplates, setFilteredTemplates] = useState<ReportTemplate[]>(BUILT_IN_TEMPLATES);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState<string | null>(null);

  useEffect(() => {
    // Filter templates based on search and category
    let filtered = templates;

    if (searchQuery) {
      filtered = filtered.filter(
        (template) =>
          template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          template.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (selectedCategory) {
      filtered = filtered.filter((template) => template.category === selectedCategory);
    }

    setFilteredTemplates(filtered);
  }, [searchQuery, selectedCategory, templates]);

  const handleGenerateReport = async (template: ReportTemplate) => {
    setIsGenerating(template.id);
    try {
      const response = await fetch('/api/reports/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: template.name,
          category: template.category,
          type: template.type,
          config: {},
        }),
      });

      if (!response.ok) throw new Error('Failed to generate report');

      const result = await response.json();
      toast.success(`${template.name} generated successfully!`);

      if (result.pdfUrl) {
        window.open(result.pdfUrl, '_blank');
      }
    } catch (error) {
      console.error('Error generating report:', error);
      toast.error('Failed to generate report');
    } finally {
      setIsGenerating(null);
    }
  };

  const categories = Object.entries(CATEGORY_LABELS);

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Report Templates</h1>
        <p className="text-muted-foreground">
          Pre-built report templates for common business needs
        </p>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="relative flex-1 max-w-md">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search templates..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-9"
          />
        </div>

        <div className="flex gap-2 overflow-x-auto pb-2">
          <Button
            variant={selectedCategory === null ? 'default' : 'outline'}
            size="sm"
            onClick={() => setSelectedCategory(null)}
          >
            All
          </Button>
          {categories.map(([value, label]) => (
            <Button
              key={value}
              variant={selectedCategory === value ? 'default' : 'outline'}
              size="sm"
              onClick={() => setSelectedCategory(value)}
            >
              {label}
            </Button>
          ))}
        </div>
      </div>

      {/* Templates Grid */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {filteredTemplates.map((template, index) => {
          const IconComponent = template.icon;
          return (
            <Card key={index} className="overflow-hidden hover:shadow-md transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-lg bg-muted ${template.color}`}>
                      <IconComponent className="h-5 w-5" />
                    </div>
                    <div>
                      <CardTitle className="text-base">{template.name}</CardTitle>
                      <Badge variant="secondary" className="mt-1">
                        {CATEGORY_LABELS[template.category]}
                      </Badge>
                    </div>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                <CardDescription className="text-sm">
                  {template.description}
                </CardDescription>

                <div className="flex gap-2">
                  <Button
                    size="sm"
                    className="flex-1"
                    onClick={() => handleGenerateReport(template)}
                    disabled={isGenerating === template.id}
                  >
                    <Play className="mr-2 h-4 w-4" />
                    {isGenerating === template.id ? 'Generating...' : 'Generate'}
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    asChild
                  >
                    <Link href={`/admin/reports/builder?template=${template.id}`}>
                      <Eye className="mr-2 h-4 w-4" />
                      Customize
                    </Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {filteredTemplates.length === 0 && (
        <div className="flex flex-col items-center justify-center p-12 border rounded-lg">
          <FileText className="h-12 w-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-semibold mb-2">No templates found</h3>
          <p className="text-muted-foreground text-sm">
            Try adjusting your search or filter criteria
          </p>
        </div>
      )}
    </div>
  );
}
