'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import {
  Users,
  Search,
  Plus,
  Eye,
  Edit,
  Trash2,
  Shield,
  UserCheck,
  UserX,
  Filter,
  Download,
  RefreshCw
} from 'lucide-react'
import Link from 'next/link'
import { toast } from 'sonner'
import { exportToCSV } from '@/lib/utils/export'
import { StatsGridSkeleton } from '@/components/skeletons/stats-skeleton'
import { ConfirmDialog } from '@/components/confirm-dialog'

interface User {
  id: string
  email: string
  name: string | null
  role: string
  createdAt: string
  updatedAt: string
  emailVerified: Date | null
  deletedAt: Date | null
}

interface UsersData {
  users: User[]
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}

export default function SuperAdminUsersPage() {
  const [usersData, setUsersData] = useState<UsersData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [roleFilter, setRoleFilter] = useState('ALL')
  const [statusFilter, setStatusFilter] = useState('ACTIVE')
  const [currentPage, setCurrentPage] = useState(1)
  const [refreshing, setRefreshing] = useState(false)
  const [deleteDialog, setDeleteDialog] = useState<{
    open: boolean
    id: string
    name: string
  }>({ open: false, id: '', name: '' })
  const [statusDialog, setStatusDialog] = useState<{
    open: boolean
    id: string
    name: string
    currentStatus: boolean
  }>({ open: false, id: '', name: '', currentStatus: false })

  const loadUsers = async () => {
    try {
      setLoading(true)
      console.log('📊 Loading users...', { page: currentPage, role: roleFilter, search: searchTerm })
      
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
        ...(roleFilter !== 'ALL' && { role: roleFilter }),
        ...(statusFilter !== 'ALL' && { status: statusFilter }),
        ...(searchTerm && { search: searchTerm })
      })

      const response = await fetch(`/api/admin/users?${params}`)
      
      if (!response.ok) {
        throw new Error(`Failed to fetch users: ${response.status}`)
      }

      const result = await response.json()
      console.log('✅ Users loaded:', result)

      setUsersData(result)
      setError(null)
      toast.success('Users loaded successfully')
    } catch (err) {
      console.error('❌ Error loading users:', err)
      setError(err instanceof Error ? err.message : 'Failed to load users')
      toast.error('Failed to load users. Please try again.')
    } finally {
      setLoading(false)
      setRefreshing(false)
    }
  }

  useEffect(() => {
    loadUsers()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentPage, roleFilter, statusFilter])

  // Debounced search
  useEffect(() => {
    const timer = setTimeout(() => {
      if (currentPage === 1) {
        loadUsers()
      } else {
        setCurrentPage(1)
      }
    }, 500)
    return () => clearTimeout(timer)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchTerm])

  const handleRefresh = () => {
    setRefreshing(true)
    loadUsers()
  }

  const handleDeleteUser = async () => {
    try {
      const response = await fetch(`/api/admin/users/${deleteDialog.id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Failed to delete user')
      }

      toast.success(`User "${deleteDialog.name}" deleted successfully`)
      setDeleteDialog({ open: false, id: '', name: '' })
      loadUsers()
    } catch (err) {
      console.error('Error deleting user:', err)
      toast.error('Failed to delete user. Please try again.')
    }
  }

  const handleToggleStatus = async () => {
    try {
      const response = await fetch(`/api/admin/users/${statusDialog.id}/status`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ active: !statusDialog.currentStatus })
      })

      if (!response.ok) {
        throw new Error('Failed to update user status')
      }

      toast.success(`User ${!statusDialog.currentStatus ? 'activated' : 'deactivated'} successfully`)
      setStatusDialog({ open: false, id: '', name: '', currentStatus: false })
      loadUsers()
    } catch (err) {
      console.error('Error updating user status:', err)
      toast.error('Failed to update user status. Please try again.')
    }
  }

  const handleExport = () => {
    if (!usersData) return
    
    const exportData = usersData.users.map(user => ({
      Name: user.name || 'Unnamed User',
      Email: user.email,
      Role: user.role,
      Status: user.deletedAt ? 'Deactivated' : 'Active',
      'Email Verified': user.emailVerified ? 'Yes' : 'No',
      'Created At': formatDate(user.createdAt),
      'Updated At': formatDate(user.updatedAt)
    }))
    exportToCSV(exportData, 'users')
  }

  const getRoleBadge = (role: string) => {
    switch (role) {
      case 'SUPER_ADMIN':
        return <Badge className="bg-purple-500/20 text-purple-400 border-purple-500/30">Super Admin</Badge>
      case 'ADMIN':
        return <Badge className="bg-red-500/20 text-red-400 border-red-500/30">Admin</Badge>
      case 'PROJECT_MANAGER':
        return <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30">Project Manager</Badge>
      case 'TEAM_MEMBER':
        return <Badge className="bg-green-500/20 text-green-400 border-green-500/30">Team Member</Badge>
      case 'CLIENT':
        return <Badge className="bg-yellow-500/20 text-yellow-400 border-yellow-500/30">Client</Badge>
      default:
        return <Badge className="bg-gray-500/20 text-gray-400 border-gray-500/30">{role}</Badge>
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  if (loading && !refreshing) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-8">
        <div className="container mx-auto space-y-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <div className="h-8 bg-slate-700 rounded w-64 animate-pulse"></div>
                <div className="h-4 bg-slate-700 rounded w-96 animate-pulse"></div>
              </div>
            </div>
            <StatsGridSkeleton count={4} />
            <div className="h-24 bg-slate-800 rounded animate-pulse"></div>
            <div className="space-y-4">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="h-24 bg-slate-800 rounded animate-pulse"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-8">
      <div className="container mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2">User Management</h1>
            <p className="text-slate-400">Manage all users and their permissions</p>
          </div>
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={handleRefresh}
              disabled={refreshing}
              className="border-slate-600"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
              Refresh
            </Button>
            <Button className="bg-blue-600 hover:bg-blue-700" asChild>
              <Link href="/super-admin/users/new">
                <Plus className="w-4 h-4 mr-2" />
                Add User
              </Link>
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6" data-testid="users-stats-cards">
          <Card className="bg-slate-800/50 border-slate-700" data-testid="stat-total-users">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Total Users</p>
                  <p className="text-2xl font-bold text-white">
                    {usersData?.pagination.total || 0}
                  </p>
                </div>
                <Users className="w-8 h-8 text-blue-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Active Users</p>
                  <p className="text-2xl font-bold text-green-400">
                    {usersData?.users.filter(u => !u.deletedAt).length || 0}
                  </p>
                </div>
                <UserCheck className="w-8 h-8 text-green-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Admins</p>
                  <p className="text-2xl font-bold text-purple-400">
                    {usersData?.users.filter(u => u.role === 'ADMIN' || u.role === 'SUPER_ADMIN').length || 0}
                  </p>
                </div>
                <Shield className="w-8 h-8 text-purple-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">Deactivated</p>
                  <p className="text-2xl font-bold text-red-400">
                    {usersData?.users.filter(u => u.deletedAt).length || 0}
                  </p>
                </div>
                <UserX className="w-8 h-8 text-red-400" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-4">
              {/* Search */}
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                  <Input
                    placeholder="Search by name or email..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 bg-slate-900/50 border-slate-600 text-white"
                    data-testid="users-search-input"
                  />
                </div>
              </div>

              {/* Role Filter */}
              <Select value={roleFilter} onValueChange={setRoleFilter}>
                <SelectTrigger className="w-48 bg-slate-900/50 border-slate-600 text-white" data-testid="users-role-filter">
                  <Filter className="w-4 h-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-slate-800 border-slate-700">
                  <SelectItem value="ALL">All Roles</SelectItem>
                  <SelectItem value="SUPER_ADMIN">Super Admin</SelectItem>
                  <SelectItem value="ADMIN">Admin</SelectItem>
                  <SelectItem value="PROJECT_MANAGER">Project Manager</SelectItem>
                  <SelectItem value="TEAM_MEMBER">Team Member</SelectItem>
                  <SelectItem value="CLIENT">Client</SelectItem>
                </SelectContent>
              </Select>

              {/* Status Filter */}
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-48 bg-slate-900/50 border-slate-600 text-white" data-testid="users-status-filter">
                  <Filter className="w-4 h-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-slate-800 border-slate-700">
                  <SelectItem value="ALL">All Status</SelectItem>
                  <SelectItem value="ACTIVE">Active Only</SelectItem>
                  <SelectItem value="INACTIVE">Inactive Only</SelectItem>
                </SelectContent>
              </Select>

              {/* Export Button */}
              <Button 
                variant="outline" 
                className="border-slate-600"
                onClick={handleExport}
                data-testid="users-export-button"
              >
                <Download className="w-4 h-4 mr-2" />
                Export
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Error Message */}
        {error && (
          <Card className="bg-red-500/10 border-red-500/50">
            <CardContent className="p-4">
              <p className="text-red-400">{error}</p>
            </CardContent>
          </Card>
        )}

        {/* Users Table */}
        <Card className="bg-slate-800/50 border-slate-700" data-testid="users-list-card">
          <CardHeader>
            <CardTitle className="text-white">Users List</CardTitle>
          </CardHeader>
          <CardContent>
            {usersData && usersData.users.length > 0 ? (
              <div className="space-y-4" data-testid="users-list">
                {usersData.users.map((user) => (
                  <Card 
                    key={user.id} 
                    className={`bg-slate-900/50 border-slate-700 hover:bg-slate-900/70 transition-colors ${
                      user.deletedAt ? 'opacity-50' : ''
                    }`}
                    data-testid={`user-card-${user.id}`}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 flex-1">
                          {/* Avatar */}
                          <div className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold text-lg">
                            {user.name?.charAt(0)?.toUpperCase() || user.email.charAt(0).toUpperCase()}
                          </div>

                          {/* User Info */}
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-1">
                              <h3 className="font-semibold text-white">
                                {user.name || 'Unnamed User'}
                              </h3>
                              {getRoleBadge(user.role)}
                              {user.deletedAt && (
                                <Badge className="bg-red-500/20 text-red-400 border-red-500/30">
                                  Deactivated
                                </Badge>
                              )}
                              {user.emailVerified && (
                                <Badge className="bg-green-500/20 text-green-400 border-green-500/30">
                                  Verified
                                </Badge>
                              )}
                            </div>
                            <p className="text-slate-400 text-sm">{user.email}</p>
                            <p className="text-slate-500 text-xs mt-1">
                              Joined {formatDate(user.createdAt)}
                            </p>
                          </div>
                        </div>

                        {/* Actions */}
                        <div className="flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-slate-600"
                            asChild
                          >
                            <Link href={`/super-admin/users/${user.id}`}>
                              <Eye className="w-4 h-4" />
                            </Link>
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-slate-600"
                            asChild
                          >
                            <Link href={`/super-admin/users/${user.id}/edit`}>
                              <Edit className="w-4 h-4" />
                            </Link>
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-slate-600"
                            onClick={() => setStatusDialog({ 
                              open: true, 
                              id: user.id, 
                              name: user.name || user.email,
                              currentStatus: !user.deletedAt 
                            })}
                          >
                            {user.deletedAt ? <UserCheck className="w-4 h-4" /> : <UserX className="w-4 h-4" />}
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-red-600 text-red-400 hover:bg-red-500/10"
                            onClick={() => setDeleteDialog({ open: true, id: user.id, name: user.name || user.email })}
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center py-12">
                <Users className="w-16 h-16 text-slate-600 mx-auto mb-4" />
                <p className="text-slate-400 text-lg mb-2">No users found</p>
                <p className="text-slate-500 text-sm">Try adjusting your filters or search</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Pagination */}
        {usersData && usersData.pagination.totalPages > 1 && (
          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <p className="text-slate-400 text-sm">
                  Showing page {usersData.pagination.page} of {usersData.pagination.totalPages}
                  {' '}({usersData.pagination.total} total users)
                </p>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className="border-slate-600"
                  >
                    Previous
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(p => Math.min(usersData.pagination.totalPages, p + 1))}
                    disabled={currentPage === usersData.pagination.totalPages}
                    className="border-slate-600"
                  >
                    Next
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      <ConfirmDialog
        open={deleteDialog.open}
        onOpenChange={(open) => setDeleteDialog({ ...deleteDialog, open })}
        title="Delete User?"
        description={`Are you sure you want to delete "${deleteDialog.name}"? This will permanently remove the user and all associated data. This action cannot be undone.`}
        onConfirm={handleDeleteUser}
        variant="destructive"
      />

      <ConfirmDialog
        open={statusDialog.open}
        onOpenChange={(open) => setStatusDialog({ ...statusDialog, open })}
        title={statusDialog.currentStatus ? 'Deactivate User?' : 'Activate User?'}
        description={
          statusDialog.currentStatus 
            ? `Are you sure you want to deactivate "${statusDialog.name}"? They will lose access to the system.`
            : `Are you sure you want to activate "${statusDialog.name}"? They will regain access to the system.`
        }
        onConfirm={handleToggleStatus}
        variant={statusDialog.currentStatus ? 'destructive' : 'default'}
      />
    </div>
  )
}
